 //Script GUID:1977496a-f7b1-45fe-b810-e097b7c14e0b
//Used for tracking history

//MODULE @"/shares/AzureAnalytics.Prod/Sdk/AzureAnalytics1.3.module" AS AzureAnalytics;

//#DECLARE StartDate string = @@startDateTime@@;
//#DECLARE EndDate string = @@endDateTime@@;
#DECLARE StartDate string = @"2020-5-24 00:00";
#DECLARE EndDate string = @"2020-5-25 00:00";
#DECLARE JobFrequency string = @"1440";
#DECLARE ExpiryInDays string = @"730";
#DECLARE StartDateTime DateTime = DateTime.Parse(@StartDate);
#DECLARE EndDateTime DateTime = DateTime.Parse(@StartDate);

#DECLARE IoTEdgeStream string = "Microsoft.Cloud.AzureSRE.AzureIoTEdge";
//#DECLARE Stage string = @"@@stage@@";
#DECLARE Stage string = "PPE";

// ###################################################################################
// Read in data

//#DECLARE MetricsStream string = @"Microsoft.Azure.SRE.OI.lefitche.P360.realProm10";
//AzureAnalytics.Initialize
//(
//    entity = @MetricsStream
//);
//metrics =
//    AzureAnalytics.LoadStream
//    (
//        entity = @MetricsStream,
//        startDateTime = @StartDate,
//        endDateTime = @EndDate
//    );

metrics =
    SSTREAM @"C:\Users\Lee\Downloads\Data_2020_06_27.ss";

////https://aad.cosmos11.osdinfra.net/cosmos/AzureSRE/shares/AzureAnalytics.Data1/AzureAnalytics.Data1.PublishedData/Microsoft.Cloud.AzureSRE.AzureIoTEdge/P360EdgeActiveDevicesPROD/2019/11/Data_2019_11_14.ss?property=info
//#DECLARE DevicesStream string = @IoTEdgeStream + ".P360EdgeActiveDevices" + @Stage;
//AzureAnalytics.Initialize
//(
//    entity = @DevicesStream
//);
//deviceInfo =
//    AzureAnalytics.LoadStream
//    (
//        entity = @DevicesStream,
//        startDateTime = @StartDate,
//        endDateTime = @EndDate
//    );

deviceInfo =
    SSTREAM @"C:\Users\Lee\Downloads\Data_2020_06_27 (1).ss";

deviceInfo =
    SELECT *,
           value.Split('/').LastOrDefault() AS deviceId;

// ###################################################################################
// Disk Space

avaliableSpace =
    SELECT name,
           AvaliabilityHelper.ParseTags(tags) AS tags,
           time,
           value,
           deviceId
    FROM metrics
    WHERE name == "edgeAgent_available_disk_space_bytes";

totalSpace =
    SELECT name,
           AvaliabilityHelper.ParseTags(tags) AS tags,
           time,
           value,
           deviceId
    FROM metrics
    WHERE name == "edgeAgent_total_disk_space_bytes";

avaliableSpace =
    SELECT AvaliabilityHelper.GetTotalDisk(ARRAY_AGG(value), ARRAY_AGG(tags["disk_name"])) AS value,
           deviceId
    GROUP BY deviceId
    FROM avaliableSpace;

totalSpace =
    SELECT AvaliabilityHelper.GetTotalDisk(ARRAY_AGG(value), ARRAY_AGG(tags["disk_name"])) AS value,
           deviceId
    GROUP BY deviceId
    FROM totalSpace;

// Add device dimensions 
avaliableSpace =
    SELECT @EndDateTime AS usageTime,
           d.resourceId,
           d.resourceLocation,
           a.value AS avaliableSpace,
           a.deviceId,
           d.iotHubName,
           d.resourceDeploymentUnit,
           d.skuName,
           d.subscriptionType,
           d.resourceGroup,
           d.solutionType,
           d.createdFromSuite,
           d.cloudType,
           d.SDKVersion,
           d.RuntimeVersion AS DotnetRuntimeVersion,
           d.OSName,
           d.OSVersion,
           d.OSSkuId,
           d.HWPlatform,
           d.OSSimplified
    FROM avaliableSpace AS a
         JOIN
             deviceInfo AS d
         ON a.deviceId == d.deviceId;

totalSpace =
    SELECT @EndDateTime AS usageTime,
           d.resourceId,
           d.resourceLocation,
           a.value AS totalSpace,
           a.deviceId,
           d.iotHubName,
           d.resourceDeploymentUnit,
           d.skuName,
           d.subscriptionType,
           d.resourceGroup,
           d.solutionType,
           d.createdFromSuite,
           d.cloudType,
           d.SDKVersion,
           d.RuntimeVersion AS DotnetRuntimeVersion,
           d.OSName,
           d.OSVersion,
           d.OSSkuId,
           d.HWPlatform,
           d.OSSimplified
    FROM totalSpace AS a
         JOIN
             deviceInfo AS d
         ON a.deviceId == d.deviceId;

OUTPUT avaliableSpace
TO "D:/Scope/Data/avaliableSpace.txt"
USING DefaultTextOutputter();

OUTPUT totalSpace
TO "D:/Scope/Data/totalSpace.txt"
USING DefaultTextOutputter();

// ###################################################################################
// Avaliability

#DECLARE AgentName string = "AYupJXQ4fJ7tQDkuGAGkU5Pjkv6wRvUbW7DDZdsspUE=";
#DECLARE HubName string = "FyqmR5DDaJyT+Y66uShWhQOpJaZkbhrCjR7AbcPgsq0=";
#DECLARE ExpectedMetric string = "edgeAgent_total_time_expected_running_seconds";
#DECLARE ActualMetric string = "edgeAgent_total_time_running_correctly_seconds";

// filter by metric name and parse tags
running =
    SELECT name,
           AvaliabilityHelper.ParseTags(tags) AS tags,
           time,
           value,
           deviceId
    FROM metrics
    WHERE name == @ExpectedMetric OR name == @ActualMetric;

running =
    SELECT name,
           tags["module_name"]AS module,
           tags["instance_number"]AS instance,
           value,
           time,
           deviceId
    WHERE tags.ContainsKey("module_name") AND tags.ContainsKey("instance_number");

// this should be unnecessary, but drop any non edge hub or edge agent modules
running =
    SELECT *
    WHERE module == @AgentName OR module == @HubName;

// group by module, deviceId and instance to calculate duration
running =
    SELECT *,
           AvaliabilityHelper.Hash(name, deviceId, module, instance) AS uid;

running =
    SELECT ANY_VALUE(name) AS name,
           ANY_VALUE(module) AS module,
           ANY_VALUE(deviceId) AS deviceId,
           MAX(value) - MIN(value) AS duration,
           uid
    GROUP BY uid;

//sum up instances from same deviceId
running =
    SELECT *,
           AvaliabilityHelper.Hash(name, module, deviceId) AS uid2;

running =
    SELECT ANY_VALUE(name) AS name,
           ANY_VALUE(module) AS module,
           ANY_VALUE(deviceId) AS deviceId,
           SUM(duration) AS duration,
           uid2
    GROUP BY uid2;

// split into actual and expected
running =
    SELECT *,
           AvaliabilityHelper.Hash(module, deviceId) AS uid3;

actual =
    SELECT *
    FROM running
    WHERE name == @ActualMetric;

expected =
    SELECT *
    FROM running
    WHERE name == @ExpectedMetric;

// calculate result
avaliabilities =
    SELECT e.module,
           e.deviceId,
           a.duration / e.duration AS avaliability,
           a.duration AS actualRunningDurationSeconds,
           e.duration AS expectedRunningDurationSeconds
    FROM actual AS a
         INNER JOIN
             expected AS e
         ON e.uid3 == a.uid3;

// Add device dimensions 
avaliabilities =
    SELECT @EndDateTime AS usageTime,
           d.resourceId,
           d.resourceLocation,
           a.actualRunningDurationSeconds AS numeratorQuantity,
           a.expectedRunningDurationSeconds AS denominatorQuantity,
           a.module,
           a.deviceId,
           d.iotHubName,
           d.resourceDeploymentUnit,
           d.skuName,
           d.subscriptionType,
           d.resourceGroup,
           d.solutionType,
           d.createdFromSuite,
           d.cloudType,
           d.SDKVersion,
           d.RuntimeVersion AS DotnetRuntimeVersion,
           d.OSName,
           d.OSVersion,
           d.OSSkuId,
           d.HWPlatform,
           d.OSSimplified
    FROM avaliabilities AS a
         JOIN
             deviceInfo AS d
         ON a.deviceId == d.deviceId;

// Split into agent and hub
agentAvaliabilities =
    SELECT "Microsoft.AzureIOTHub.EdgeAgentAvailability" + @Stage AS meterId,
           *
    FROM avaliabilities
    WHERE module == @AgentName;

hubAvaliabilities =
    SELECT "Microsoft.AzureIOTHub.EdgeHubAvailability" + @Stage AS meterId,
           *
    FROM avaliabilities
    WHERE module == @HubName;

//// Add version info
////https://aad.cosmos11.osdinfra.net/cosmos/AzureSRE/shares/AzureAnalytics.Data1/AzureAnalytics.Data1.PublishedData/Microsoft.Cloud.AzureSRE.AzureIoTEdge/P360IoTEdgeMessagesPROD/2019/11/Data_2019_11_19.ss?property=info
//#DECLARE MessagesStream string = @IoTEdgeStream + ".P360IoTEdgeMessages" + @Stage;
//AzureAnalytics.Initialize
//(
//    entity = @MessagesStream
//);
//versionInfo =
//    AzureAnalytics.LoadStream
//    (
//        entity = @MessagesStream,
//        startDateTime = @StartDate,
//        endDateTime = @EndDate
//    );

versionInfo =
    SSTREAM @"C:\Users\Lee\Downloads\Data_2020_06_27 (2).ss";

agentVersion =
    SELECT deviceId.Split('/').LastOrDefault() AS deviceId,
           ARGMAX(usageTime, ModuleType) AS version
    FROM versionInfo
    WHERE moduleId == "$edgeAgent"
    GROUP BY deviceId;

agentAvaliabilities =
    SELECT v.version,
           a.*
    FROM agentAvaliabilities AS a
         JOIN
             agentVersion AS v
         ON a.deviceId == v.deviceId;

hubVersion =
    SELECT deviceId.Split('/').LastOrDefault() AS deviceId,
           ARGMAX(usageTime, EdgeHubVersion) AS version
    FROM versionInfo
    WHERE moduleId == "$edgeHub"
    GROUP BY deviceId;

hubAvaliabilities =
    SELECT v.version,
           a.*
    FROM hubAvaliabilities AS a
         JOIN
             hubVersion AS v
         ON a.deviceId == v.deviceId;

//// output
//AzureAnalytics.PublishStream
//(
//    entity = @IoTEdgeStream + ".P360EdgeAgentAvailability" + @Stage,
//    startDateTime = @StartDate,
//    periodInMinutes = @JobFrequency,
//    input = agentAvaliabilities,
//    clusteredBy = "usageTime, resourceId",
//    sortedBy = "usageTime, resourceId",
//    expiryInDays = @ExpiryInDays
//);
//
//AzureAnalytics.PublishStream
//(
//    entity = @IoTEdgeStream + ".P360EdgeHubAvailability" + @Stage,
//    startDateTime = @StartDate,
//    periodInMinutes = @JobFrequency,
//    input = hubAvaliabilities,
//    clusteredBy = "usageTime, resourceId",
//    sortedBy = "usageTime, resourceId",
//    expiryInDays = @ExpiryInDays
//);

OUTPUT agentAvaliabilities
TO "D:/Scope/Data/agent.txt"
USING DefaultTextOutputter();

OUTPUT hubAvaliabilities
TO "D:/Scope/Data/hub.txt"
USING DefaultTextOutputter();